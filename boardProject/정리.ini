

1) config.properties 내용을 읽어와
  HikariConfig Bean 등록
  
2) HikariConfig Bean을 이용해서 
   DataSoruce(Java DBCP 사용을 위한 인터페이스) Bean 등록
   
3) DataSoruce Bean을 이용해서
   DataSourceTransactionManager Bean 등록
   (DBCP을 이용해서 SQL 수행 시 트랜잭션을 처리를 관리) 
   
4) DataSoruce + mapper파일 + mybatis-congfig.xml 파일을 이용해
   SqlSession Bean 등록 
   (DB연결 + SQL파일 위치 등록 
			+ 마이바티스 설정 적용 + 클래스 별칭 등록)

5) SqlSessionFactory 이용해
   SqlSessionTemplate Bean 등록
   (DB연결 + 마이바티스 기능 사용
    + Spring 제공 트랜잭션 관련 어노테이션 사용 가능)

----------------------------------------------

* HTTP 응답 상태 코드

200 : 응답 성공 (200번대가 성공의 의미)

400 : 잘못된 요청 (파라미터 누락)
403 : 접근이 거부된 상태(서버 접속 불가)
404 : 찾을 수 없음(url 또는 forward 경로 잘못됨)
405 : 허용되지 않은 요청(GET,POST 잘못 입력)

500 : 서버 내부 오류
  - JAVA 코드 문제
  - Thymeleaf 코드 문제
  - DB 연결 문제
  - Mybatis 관련 문제 ...
  -> 꼭 서버 콘솔 확인!!!

----------------------------------------------

Framework 정리

* Controller
  요청/응답 제어하는 역할
  - 어떤 요청을 처리할지 주소 매핑
  - 요청 처리된 결과에 따라 응답하는 방법 (forward, redirect, 값 등)

* instance
  개발자가 new를 이용해 만든 객체

* bean
  Spring(Java)이 만든 객체

* 어노테이션(@~)
  - 컴파일러가 인식하는 주석
* @Controller 
  - Controller임을 명시
  - 클래스 작성된 내용대로 구현
    -> 스프링이 객체 생성 == Bean 등록 / Bean 생성

* @WebServlet("요청주소")
  - 해당 클래스에 "요청주소"를 매핑해서 처리하는 클래스

* 기존의 Servlet
  - @~~("~~") -> 클래스명 위에 작성
  - 클래스별로 요청 주소 1개만 처리 가능

* @RequestMapping("요청주소")
  - 클래스명, 메서드명 위에 작성
  - 요청주소를 처리할 클래스/메서드를 매핑하는 어노테이션
  - View Resolvet(뷰 해결사)가 접두사, 접미사를 붙여줌

  1) 클래스 위에 작성 시
    - 공통 주소를 해당 클래스에 매핑
    ex) /todo/select, /todo/insert, /todo/update ...
	   		-> @RequestMapping("todo") // /todo로 시작하는 요청

  2) 메서드 위에 작성 시
    - 해당 메서드에서 처리 (GET/POST 가리지 않음)

* @GetMapping("요청주소")
  - 메서드명 위에 작성

* @PostMapping("요청주소")
  - 메서드명 위에 작성

* Controller 메서드 작성법
  - 접근제한자는 public
  - 반환형은 대부분 String
    (ModelanView or Aiax 사용 시 달라질 수 있음)
    : Controller 메서드에서 반환되는 문자열이 
      forward할 html 파일의 경로가 되기 때문
  - 메서드 명은 의미있게 작성
  - 매개변수는 필요한만큼 가능
  - 매핑할 요청 주소를 @RequestMapping 등을 이용해 작성
  - Spring Boot Controller에서 보통 매핑주소 맨 앞에 "/"는 적지 않는다

* Thymeleaf
  - 템플릿 엔진(JSP대신 사용)
  - 접두사(prefix) 'classpath:/templates', 
    접미사(suffix) '.html' 제공
  - controller 메서드에서 반환되는 문자열에 접미사, 접두사가 붙어서
    forward할 html 파일의 경로형태가 됨

* Parameter
  - 매개변수(메서드 수행 시 전달받은 값)

* Argument
  - 전달인자(메서드 호출 시 전달하는 값)

* HttpServletRequest
  - 요청한 클라이언트의 정보, 제출된 파라미터 등을 저장한 객체
  - 매개변수 HttpServletRequest req 사용 가능
    why? Spring의 ArgumentResolver 덕분에 가능

* ArgumenstResolver
  - 전달 인자 해결사
  - Controller 메서드에 작성된
    매개변수 타입에 맞는 객체가 존재하면 그대로 바인딩,
    없으면 생성해서 바인딩

* forward
  - 클라이언트에 요청에 대한 응답 처리를 대신 해달라고 넘기는 것(요청 위임)
  - 위임시 HttpServletRequest, HttpServletResponse를 같이 위임

* @RequestParam
  - request객체를 이용한 파라미터 전달 어노테이션
  - 작성법 : 
    @RequestParam("key") 자료형 매개변수명
  - 매개변수 앞에 해당 어노테이션 작성 시 매개변수에 데이터 주입됨
    이때, 데이터는 매개변수의 타입에 맞게 형변환/파싱이 자동으로 수행됨
  - 속성 추가 작성법 :
    @RequestParam(value="name", required="false", defaultValue="1")
  
  * value
    전달 받은 input 태그의 name 속성값
  * required
    입력된 name 속성값 파라미터 필수 여부 지정(기본값 true)
    required = true인 파라미터 존재 x -> 400 Bad Request 에러
    required = true인 파라미터 null -> 400 Bad Request 에러
  * defaultValue
    파라미터 중 일치하는 name 속성 값 x -> 대입할 값 지정
    -> required = false인 경우 사용


* ParameterController.java / 127줄부터

----------------------------------------------

경로

절대 경로
- 절대적인 기준점 하나를 설정하고
  기준부터 주소/경로 작성

ex) 기준 : 서울특별시
서울특별시 중구 남대문로 120 2층

기준 : C:
C:/workspace/08_Framework

기준 : /
/myPage/info    /member/login


상대 경로
- 현재 위치를 기준으로 목표하는 곳을 찾아가는 
  주소/경로를 작성하는 방법

ex) 
현재 위치 : /member/login 
            --> login이 작성된 칸 기준!!

목표 위치 : /member/logout
상대 경로 : logout

----------------------------------------------
현재 위치 : /member/login

목표 위치 : /member

상대 경로 : ../ (상위 
폴더, 상위 경로)

---------------------------------------------
현재 위치 : /member/login
목표 위치 : /member/signUp/idCheck

상대 경로 : signUp/idCheck

<input type="file">의 특징 겸 문제점

- 파일 선택 중 취소를 누르면
  이전에 선택한 "파일이 남아있지 않다"!!

- 해당 요소에는 value 값으로 빈칸을 제외하곤
대입할 수 없다
(대입되는 빈칸의 뜻 : 선택된 파일 제거)

-----------------------------------------------------------------------------------------

- 파일 타입의 input태그는
  value에 값(파일)이 저장되는 것이 아닌
  files라고하는 내부 속성에 저장되어진다

- 전용 html 속성
  1) multiple : 파일 선택 시 여러 파일 선택 가능
  2) accept   : 선택할 수 있는 파일 종류 지정

관계 설정 시 생각해야 하는 것

1. 참조 방향(어떤 테이블의 PK를 참조?)

2. 참조 횟수(1번? N번?)

3. 꼭 참조를 해야하는가?(선택? 필수?)

-----------------------------------------------------------------------------------------

[게시글 상세 조회]
!) 게시글 정보
(제목,내용,작성자,프로필,작성일,수정일,조회수,좋아요)

2) 게시글 이미지 (0~5개)

3) 게시글 댓글 (all)

[게시글 조회 수 증가]
- 게시글 상세 조회 시 증가

- 컴퓨터당 하루에 1회 조회수

- 내가 쓴 글은 조회 수 증가 x

- Cookie
 - 데이터를 클라이언트가 관리
 - 서버 요청할때마다 요청에 담겨서 서버에 전달
  -> 서버에서 읽은 게시글 번호를 쿠키에 기록하여 클라이언트에게 전달

* Session 
 - 데이터를 서버에서 관리 
 - 클라이언트가 서버에 최초 연결 시 
   생성 

-----------------------------------------------------------------------------------------

[게시글 좋아요]
- 로그인한 회원만 클릭 가능

- 좋아요 체크(INSERT) <-> 체크 해제(DELETE)
  클릭 시 마다 반대로 동작

-----------------------------------------------------------------------------------------

  동기 vs 비동기
  새로고침 하냐 안 하냐
  동기   -> 화면 로딩시간 걸릴 수 있음 (화면을 다 만들고 보여줌)
  비동기 -> 화면 로딩 빠름(대신 화면 세부로딩이 좀 걸릴수도 있음)

-----------------------------------------------------------------------------------------

interceptor : 요청 / 응답 가로챔
그림에서 3, 5, 6 방향표에 가로챌 수 있음

Filter : Client <-> Dispatcher Servlet 에서 가로챌 수 있음

AOP : 원하는 시점에 다 껴서 가로챌 수 있음 (주로 Filter와 interceptor가 닿지 않는 곳에 사용함)

-----------------------------------------------------------------------------------------

* 비밀번호 변경 유효성 검사

1. 현재 비밀번호
   새 비밀번호
   새 비밀번호 확인
   입력 여부 체크

2. 새 비밀번호가 알맞은 형태로 작성 되었는가 확인
  - 영어(대소문자 가리지 X) 1글자 이상
  - 숫자 1글자 이상
  - 특수문자 (! @ # _ - ) 1글자 이상
  - 최소 6글자 최대 20글자

3. 새 비밀번호, 새 비밀번호 확인 이 같은지  체크

JS에서 닉네임을 입력받아 유효성 검사하는 코드 생성

JS에서 전화번호를 입력받아 유효성 검사하는 코드 생성
- 010 으로 시작
- 11글자
- "-" 기호 제외

-----------------------------------------------------------------------------------------

탈퇴 / 삭제 처리방법
 * DELETE 아님!!!

 1) 상태 값 변경

 2) 기존 데이터 -> 탈퇴/삭제 테이블 이동
    이동 후 기존 데이터를 쓰레기값으로 변경

-----------------------------------------------------------------------------------------

이미지 수정
1) 기존에 이미지가 있음
  -> BOARD_IMG 테이블 update

2) 기존에 이미지가 없음
  -> BOARD_IMG 테이블 INSERT

3) 기존에 이미지가 있는데 그대로 둠(수정 X)
  -> FILE이 "선택된 파일 없음" 제출
  -> 기존 이미지가 유지되도록 설정

4) 기존에 이미지가 있는데 X 버튼 눌러서 삭제
  -> file이 "선택된 파일 없음" 제출
  -> DB에서 해당 이미지 삭제(DELETE)

---------------------------------------------------------

[목록으로 버튼 동작]

- /board/{board}

- {boardCode}가 일치하는 게시글
  + 삭제되지 않은 게시글 중
  현재 게시글이 몇 번째 게시글인지 구해서
  돌아가야 되는 페이지 번호 cp 구하기


----------------------------------------------------------------------------------------------

@RequestParam   : 제출된 값을 얻어올 수 있는 매개변수 / form, queryString, ajax-Get 
@ModelAttribute : 제출된 값을 가져올 수 있음
@RequestBody    : 제출된 값을 얻어올 수 있는 매개변수 / ajax-POST, put, delete
@ResponseBody   : 응답할때 본문 그대로 보낼 수 있게 ㅇㅇ 

----------------------------------------------------------------------------------------------

예외 처리 

이유 : 프로그램의 비정상 종료를 막기위해서

- throws    : 메서드에서 발생한 예외를 호출부로 던짐
- try-catch : try 안에서 발생한 예외를 catch에서 잡아서 처리

* 기본적으로 Spring에서 발생하는 대부분의 예외를 한 번에 처리하여
  에러 페이지로 넘어가게하는 ErrorController를 제공함

[목표]
1. 예외 처리 범위를 확장
  - Controller 범위(@ExceptionHandler)
  - 전역(@ControllerAdvice + ErrorController 상속)

2. 예외 처리 페이지 변경

-- 별도의 설정 없이
  templates/error/응답코드.html 파일만 있어도
  (응답코드 == 400, 404, 500 등)
  {400 잘못된 요청(parameter 값이 잘못될경우)
   404 잘못된 주소
   500 잘못된 SQL문}
  Spring에 내장된 ErrorContrller가 발생하는 응답코드와 같은 html 파일로 forward함

-----------------------------------------------------------------------------------------

[로그인이 안되어있으면 동작하지 못하는 요청을 필터 처리]

- /myPage 로 시작하는 요청
- /editBoard 로 시작하는 요청

-----------------------------------------------------------------------------------------

좋아요 -> 게시글 번호 (로 게시글 작성자번호를 얻어와서 알림 보낼 수 있음)
댓글   -> 게시글 번호 (로 게시글 작성자번호를 얻어와서 알림 보낼 수 있음)
답글   -> 부모 댓글 번호(로 댓글 작성자번호를 얻어와서 알림 보낼 수 있음)

-----------------------------------------------------------------------------------------

1) 로그인 시 또는 알림삭제 시
 종 아이콘 색상 표시 여부 변경 + 읽지 않은 알림 개수 조회

2) 알림 삭제

3) 댓글, 답글 게시글 좋아요 동작 시 알림 전달

-----------------------------------------------------------------------------------------

서버에 저장된 이미지 중
사용되지 않는 이미지를
지정된 시간마다 찾아서 삭제하는 코드
