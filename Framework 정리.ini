Framework 정리

* Controller
  요청/응답 제어하는 역할
  - 어떤 요청을 처리할지 주소 매핑
  - 요청 처리된 결과에 따라 응답하는 방법 (forward, redirect, 값 등)

* instance
  개발자가 new를 이용해 만든 객체

* bean
  Spring(Java)이 만든 객체

* 어노테이션(@~)
  - 컴파일러가 인식하는 주석
* @Controller 
  - Controller임을 명시
  - 클래스 작성된 내용대로 구현
    -> 스프링이 객체 생성 == Bean 등록 / Bean 생성

* @WebServlet("요청주소")
  - 해당 클래스에 "요청주소"를 매핑해서 처리하는 클래스

* 기존의 Servlet
  - @~~("~~") -> 클래스명 위에 작성
  - 클래스별로 요청 주소 1개만 처리 가능

* @RequestMapping("요청주소")
  - 클래스명, 메서드명 위에 작성
  - 요청주소를 처리할 클래스/메서드를 매핑하는 어노테이션
  - View Resolvet(뷰 해결사)가 접두사, 접미사를 붙여줌

  1) 클래스 위에 작성 시
    - 공통 주소를 해당 클래스에 매핑
    ex) /todo/select, /todo/insert, /todo/update ...
	   		-> @RequestMapping("todo") // /todo로 시작하는 요청

  2) 메서드 위에 작성 시
    - 해당 메서드에서 처리 (GET/POST 가리지 않음)

* @GetMapping("요청주소")
  - 메서드명 위에 작성

* @PostMapping("요청주소")
  - 메서드명 위에 작성

* Controller 메서드 작성법
  - 접근제한자는 public
  - 반환형은 대부분 String
    (ModelanView or Aiax 사용 시 달라질 수 있음)
    : Controller 메서드에서 반환되는 문자열이 
      forward할 html 파일의 경로가 되기 때문
  - 메서드 명은 의미있게 작성
  - 매개변수는 필요한만큼 가능
  - 매핑할 요청 주소를 @RequestMapping 등을 이용해 작성
  - Spring Boot Controller에서 보통 매핑주소 맨 앞에 "/"는 적지 않는다

* Thymeleaf
  - 템플릿 엔진(JSP대신 사용)
  - 접두사(prefix) 'classpath:/templates', 
    접미사(suffix) '.html' 제공
  - controller 메서드에서 반환되는 문자열에 접미사, 접두사가 붙어서
    forward할 html 파일의 경로형태가 됨

* Parameter
  - 매개변수(메서드 수행 시 전달받은 값)

* Argument
  - 전달인자(메서드 호출 시 전달하는 값)

* HttpServletRequest
  - 요청한 클라이언트의 정보, 제출된 파라미터 등을 저장한 객체
  - 매개변수 HttpServletRequest req 사용 가능
    why? Spring의 ArgumentResolver 덕분에 가능

* ArgumenstResolver
  - 전달 인자 해결사
  - Controller 메서드에 작성된
    매개변수 타입에 맞는 객체가 존재하면 그대로 바인딩,
    없으면 생성해서 바인딩

* forward
  - 클라이언트에 요청에 대한 응답 처리를 대신 해달라고 넘기는 것(요청 위임)
  - 위임시 HttpServletRequest, HttpServletResponse를 같이 위임

* @RequestParam
  - request객체를 이용한 파라미터 전달 어노테이션
  - 작성법 : 
    @RequestParam("key") 자료형 매개변수명
  - 매개변수 앞에 해당 어노테이션 작성 시 매개변수에 데이터 주입됨
    이때, 데이터는 매개변수의 타입에 맞게 형변환/파싱이 자동으로 수행됨
  - 속성 추가 작성법 :
    @RequestParam(value="name", required="false", defaultValue="1")
  
  * value
    전달 받은 input 태그의 name 속성값
  * required
    입력된 name 속성값 파라미터 필수 여부 지정(기본값 true)
    required = true인 파라미터 존재 x -> 400 Bad Request 에러
    required = true인 파라미터 null -> 400 Bad Request 에러
  * defaultValue
    파라미터 중 일치하는 name 속성 값 x -> 대입할 값 지정
    -> required = false인 경우 사용


* ParameterController.java / 127줄부터